{"version":3,"sources":["components/ContactItem/ContactItem.module.css","components/ContactFilter/ContactFilter.module.css","components/Notification/Notification.module.css","components/ContactList/ContactList.module.css","redux/actions.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/Notification/Notification.jsx","components/ContactList/ContactList.jsx","components/ContactFilter/ContactFilter.jsx","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","filterContacts","connect","contacts","items","dispatch","onSubmit","useState","setName","setNumber","nameId","numberId","formChange","event","target","value","CSSTransition","timeout","classNames","appear","in","preventDefault","find","contact","Notiflix","Notify","failure","className","css","form","label","onChange","placeholder","type","pattern","title","required","input","button","init","e","contactItem","onClick","Notification","message","filter","toLowerCase","search","contactList","length","map","findContact","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","state","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22170327.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactItem_contactItem__3sOG4\",\"button\":\"ContactItem_button__3SmCN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactFilter_label__2EkDw\",\"input\":\"ContactFilter_input__3Y8Jt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__3Obut\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__VWTju\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addContact = createAction('add', (name, number) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nexport const deleteContact = createAction('delete');\n\nexport const filterContacts = createAction('filter');\n","import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from 'redux/actions';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Notiflix from 'notiflix';\r\nimport css from 'components/ContactForm/ContactForm.module.css';\r\nimport 'components/ContactForm/animation.css';\r\n\r\nfunction ContactForm({ onSubmit, contacts }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  let id = {\r\n    nameId: uuidv4(),\r\n    numberId: uuidv4(),\r\n  };\r\n\r\n  function formSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    if (contacts.find(contact => contact.name === name)) {\r\n      Notiflix.Notify.failure(`${name} is already in contacts`);\r\n    } else {\r\n      onSubmit(name, number);\r\n      setName('');\r\n      setNumber('');\r\n    }\r\n  }\r\n\r\n  function formChange(event) {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CSSTransition\r\n        timeout={500}\r\n        classNames=\"animation\"\r\n        appear={true}\r\n        in={true}\r\n      >\r\n        <h1>Phonebook</h1>\r\n      </CSSTransition>\r\n\r\n      <form onSubmit={formSubmit} className={css.form}>\r\n        <label className={css.label}>\r\n          Name\r\n          <input\r\n            id={id.nameId}\r\n            value={name}\r\n            onChange={formChange}\r\n            placeholder=\"Name\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            className={css.input}\r\n          />\r\n        </label>\r\n        <label className={css.label}>\r\n          Number\r\n          <input\r\n            id={id.numberId}\r\n            value={number}\r\n            onChange={formChange}\r\n            placeholder=\"Number\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            className={css.input}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={css.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ contacts: { items } }) => {\r\n  return {\r\n    contacts: items,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nNotiflix.Notify.init({\r\n  timeout: 2500,\r\n});\r\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteContact } from 'redux/actions';\nimport css from 'components/ContactItem/ContactItem.module.css';\n\nfunction ContactItem({ id, name, number, deleteContact }) {\n  return (\n    <li className={css.contactItem}>\n      <span>{name}: </span>\n      <span>{number} </span>\n      <span>\n        <button\n          type=\"button\"\n          onClick={deleteContact}\n          id={id}\n          className={css.button}\n        >\n          Delete\n        </button>\n      </span>\n    </li>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: e => dispatch(deleteContact(e.target.id)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactItem);\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport css from 'components/Notification/Notification.module.css';\n\nexport function Notification({ message }) {\n  return <h2 className={css.message}>{message}</h2>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { Notification } from 'components/Notification/Notification';\nimport css from 'components/ContactList/ContactList.module.css';\n\nfunction ContactList({ contacts }) {\n  return (\n    <ul className={css.contactList}>\n      {contacts.length === 0 ? (\n        <Notification message=\"No contacts here =(\" />\n      ) : (\n        <div>\n          <h2>Contacts:</h2>\n          {contacts.map(({ id, name, number }) => (\n            <ContactItem key={id} id={id} name={name} number={number} />\n          ))}\n        </div>\n      )}\n    </ul>\n  );\n}\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: items.filter(\n    ({ name }) => name.toLowerCase().search(filter) !== -1,\n  ),\n});\n\nexport default connect(mapStateToProps)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { filterContacts } from 'redux/actions';\n\nimport css from 'components/ContactFilter/ContactFilter.module.css';\n\nfunction ContactFilter({ findContact }) {\n  return (\n    <label className={css.label}>\n      Find contact by name\n      <input\n        className={css.input}\n        name=\"find\"\n        title=\"Введите имя или название контакта\"\n        onChange={findContact}\n      />\n    </label>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  findContact: e => dispatch(filterContacts(e.target.value)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactFilter);\n\nContactFilter.propTypes = {\n  findContact: PropTypes.func.isRequired,\n};\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactFilter from 'components/ContactFilter/ContactFilter';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ContactForm />\n      <ContactFilter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, filterContacts } from 'redux/actions';\nimport { combineReducers } from 'redux';\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [filterContacts]: (state, { payload }) => payload,\n});\n\nexport const contacts = combineReducers({\n  items,\n  filter,\n});\n","// import logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport { configureStore } from '@reduxjs/toolkit';\nimport storage from 'redux-persist/lib/storage';\nimport { contacts } from 'redux/reducer';\n\nconst contactsPersistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: { contacts: persistReducer(contactsPersistConfig, contacts) },\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n    // logger,\n  ],\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store.js';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2chZY\",\"label\":\"ContactForm_label__39EFr\",\"input\":\"ContactForm_input__3yHQH\",\"button\":\"ContactForm_button__J0dta\"};"],"sourceRoot":""}